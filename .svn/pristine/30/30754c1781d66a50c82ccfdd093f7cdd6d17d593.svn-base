package businesslogic.financialbl;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Date;

import po.MoneyLineItemPO;
import po.PayReceiptPO;
import po.ReceiveReceiptPO;
import utility.SerialNumber;
import utility.TimePeriod;
import vo.MoneyLineItemVO;
import vo.PayVO;
import vo.ReceiptType;
import vo.ReceiveVO;
import businesslogic.userbl.UserController;
import businesslogic.userbl.UserManager;
import businesslogicservice.financialblservice.MoneyBLService;
import data.databaseutility.SerializableDataFactory;
import dataservice.financialdataservice.MoneyDataService;
import dataservice.utility.DataFactory;

public class Money implements MoneyBLService {
	String clientName;
	MoneyList list;
	String serialNumber;
	String userName;
	ReceiptType type;

	public Money(ReceiptType type) {
		super();
		this.type = type;
		if (type == ReceiptType.Pay) {
			serialNumber = SerialNumber.getSerialNumber("SKD",1);
		} else {
			serialNumber = SerialNumber.getSerialNumber("FKD",1);
		}
		try {
			this.userName = new UserManager().getUserName();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		list = new MoneyList();
	}

	public boolean addItem(MoneyLineItemVO vo) throws RemoteException {
		// TODO Auto-generated method stub
		list.addItem(new MoneyLineItemPO(vo.getAccountId(), vo.getSum(), vo
				.getComment()));
		return true;
	}

	public boolean delItem(int row) {
		return list.delete(row);
	}

	public boolean updateItem(Object value, int row, int col) {
		return list.update(value, row, col);
	}

	public String getSerialNumber() {
		// TODO Auto-generated method stub
		return serialNumber;
	}

	public boolean setClient(String clientName) {
		// TODO Auto-generated method stub
		return false;
	}

	public String getUser() {
		// TODO Auto-generated method stub
		return userName;
	}

	public double getSum() {
		// TODO Auto-generated method stub
		return list.getTotal();
	}

	public ArrayList<PayVO> mutipleConditionFindPay(TimePeriod period,
			String clientName, String userName, String accountName) {
		DataFactory factory = new SerializableDataFactory();
		MoneyDataService moneyDataService = factory.getMoneyDataService();
		ArrayList<PayReceiptPO> list = moneyDataService.mutipleConditionFindPay(period, clientName, userName, accountName);
		return convertPayList(list);
	}

	
	public ArrayList<ReceiveVO> mutipleConditionFindReceive(TimePeriod period,
			String clientName, String userName , String accountName) {
		DataFactory factory = new SerializableDataFactory();
		MoneyDataService moneyDataService = factory.getMoneyDataService();
		ArrayList<ReceiveReceiptPO> list = moneyDataService.mutipleConditionFindReceive(period, clientName, userName,accountName);
		return convertReceiveList(list);
	}


	ArrayList<PayVO> convertPayList(ArrayList<PayReceiptPO> poList){
		ArrayList<PayVO> voList = new ArrayList<PayVO>();
		for(PayReceiptPO po : poList){
			voList.add(new PayVO(po.getClientName(), convertMoneyListToVO(po.getList().getList()), po.getSum(), po.getSerialNumber(), po.getUserName()));
		}
		return voList;
	}
	
	ArrayList<ReceiveVO> convertReceiveList(ArrayList<ReceiveReceiptPO> poList){
		ArrayList<ReceiveVO> voList = new ArrayList<ReceiveVO>();
		for(ReceiveReceiptPO po : poList){
			voList.add(new ReceiveVO(po.getClientName(), convertMoneyListToVO(po.getList().getList()), po.getSum(), po.getSerialNumber(), po.getUserName()));
		}
		return voList;
	}
	
	private ArrayList<MoneyLineItemVO> convertMoneyListToVO(ArrayList<MoneyLineItemPO> poList){
		ArrayList<MoneyLineItemVO> voList = new ArrayList<MoneyLineItemVO>();
		for(MoneyLineItemPO po : poList){
			voList.add(new MoneyLineItemVO(po.getAccountName(), po.getSum(), po.getComment()));
		}
		return voList;
	}
	public boolean finish(ReceiptType type) {
		// TODO Auto-generated method stub
		DataFactory factory = new SerializableDataFactory();
		MoneyDataService moneyDataService = factory.getMoneyDataService();
		if(type == ReceiptType.Pay){
			moneyDataService.addPay(new PayReceiptPO(clientName, list, list.getTotal(), serialNumber, userName));
			writeLog(moneyDataService, "从" + clientName + "处收取金额" + getSum());
		}else{
			moneyDataService.addReceive(new ReceiveReceiptPO(clientName, list, list.getTotal(), serialNumber, userName));
			writeLog(moneyDataService, "支付给" + clientName + "金额" + getSum());
		}
		return true;	
		}
	
	void writeLog(MoneyDataService moneyDataService, String log){
		try {
			moneyDataService.writeLog(new Date() + "\t" + new UserController().getUserIdentity() + " " + new UserController().getUserName() + " " + log);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
