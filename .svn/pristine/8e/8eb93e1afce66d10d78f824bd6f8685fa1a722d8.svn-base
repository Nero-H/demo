package presentaion.utility;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JTree;
import javax.swing.TransferHandler;
import javax.swing.tree.TreePath;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author administration
 */
class TreeTransferHandler extends TransferHandler {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	DataFlavor nodesFlavor;
	DataFlavor[] flavors = new DataFlavor[1];
	MyTreeNode[] nodesToRemove;

	public TreeTransferHandler() {
		try {
			String mimeType = DataFlavor.javaJVMLocalObjectMimeType
					+ ";class=\"" + MyTreeNode.class.getName() + "\"";
			nodesFlavor = new DataFlavor(mimeType);
			flavors[0] = nodesFlavor;
		} catch (ClassNotFoundException e) {
			System.out.println("ClassNotFound: " + e.getMessage());
		}
	}

	@Override
	public boolean canImport(TransferHandler.TransferSupport support) {
		if (!support.isDrop()) {
			return false;
		}
		support.setShowDropLocation(true);// 无论此时能否拖拽成功都显示拖拽目标位置
		if (!support.isDataFlavorSupported(nodesFlavor)) {
			return false;
		}
		// Do not allow a drop on the drag source selections.不能拖到原位置
		JTree.DropLocation dl = (JTree.DropLocation) support.getDropLocation();
		JTree tree = (JTree) support.getComponent();
		int dropRow = tree.getRowForPath(dl.getPath());
		int[] selRows = tree.getSelectionRows();
		for (int i = 0; i < selRows.length; i++) {
			if (selRows[i] == dropRow) {
				return false;
			}
		}

		//选中的一个节点是另一个节点的父节点时 不许拖拽
        int action = support.getDropAction();
        if(action == MOVE) {
            return !bloodConnect(tree);
        }
		return true;
	}

	  private boolean bloodConnect(JTree tree) {
	        int[] selRows = tree.getSelectionRows();
	        MyTreeNode[] nodeList = new MyTreeNode[selRows.length];
	        for(int i = 0 ; i < selRows.length ; i ++){
		        TreePath path = tree.getPathForRow(selRows[i]);
	        	nodeList[i] =  (MyTreeNode)path.getLastPathComponent();
	        }
	        for(int i = 0 ; i < selRows.length ; i ++){
	        	for(int j = i + 1 ; j < selRows.length ; j ++){
	        		if((nodeList[i].isNodeAncestor(nodeList[j]))||(nodeList[j].isNodeAncestor(nodeList[i]))){
	        			return true;
	        		}
	        	}
	        }
	        return false;
	    }
	
	@Override
	protected Transferable createTransferable(JComponent c) {
		JTree tree = (JTree) c;
		TreePath[] paths = tree.getSelectionPaths();
		if (paths != null) {
			// Make up a node array of copies for transfer and
			// another for/of the nodes that will be removed in
			// exportDone after a successful drop.
			List<MyTreeNode> copies = new ArrayList<MyTreeNode>();
			MyTreeNode node = (MyTreeNode) paths[0].getLastPathComponent();
			copies.add(node);
			for (int i = 1; i < paths.length; i++) {
				MyTreeNode next = (MyTreeNode) paths[i].getLastPathComponent();
				// Do not allow higher level nodes to be added to list.
				if (next.getLevel() < node.getLevel()) {
					copies.clear();
					copies.add(next);
				} else if (next.getLevel() == node.getLevel()) { // sibling
					copies.add(next);
				}
			}
			MyTreeNode[] nodes = copies.toArray(new MyTreeNode[copies.size()]);
			nodesToRemove = copies.toArray(new MyTreeNode[copies.size()]);
			return new NodesTransferable(nodes);
		}
		return null;
	}

	@Override
	protected void exportDone(JComponent source, Transferable data, int action) {
		if ((action & MOVE) == MOVE) {
			JTree tree = (JTree) source;
			GoodsTreeModel model = (GoodsTreeModel) tree.getModel();
			// Remove nodes saved in nodesToRemove in createTransferable.
			for (int i = 0; i < nodesToRemove.length; i++) {
				model.removeNodeFromExparent(nodesToRemove[i]);
			}
		}

	}

	@Override
	public int getSourceActions(JComponent c) {
		return COPY_OR_MOVE;
	}

	@Override
	public boolean importData(TransferHandler.TransferSupport support) {
		if (!canImport(support)) {
			return false;
		}
		// Extract transfer data.
		MyTreeNode[] nodes = null;
		try {
			Transferable t = support.getTransferable();
			nodes = (MyTreeNode[]) t.getTransferData(nodesFlavor);
		} catch (UnsupportedFlavorException ufe) {
			System.out.println("UnsupportedFlavor: " + ufe.getMessage());
		} catch (java.io.IOException ioe) {
			System.out.println("I/O error: " + ioe.getMessage());
		}
		// Get drop location info.
		JTree.DropLocation dl = (JTree.DropLocation) support.getDropLocation();
		int childIndex = dl.getChildIndex();
		TreePath dest = dl.getPath();
		MyTreeNode parent = (MyTreeNode) dest.getLastPathComponent();
		JTree tree = (JTree) support.getComponent();
		GoodsTreeModel model = (GoodsTreeModel) tree.getModel();
		// Configure for drop mode.
		int index = childIndex; // DropMode.INSERT
		if (childIndex == -1) { // DropMode.ON
			index = parent.getChildCount();
		}
		// Add data to model.
		for (int i = 0; i < nodes.length; i++) {
			model.insertNodeInto(nodes[i], parent, index++);
		}
		return true;
	}

	@Override
	public String toString() {
		return getClass().getName();
	}

	public class NodesTransferable implements Transferable {
		MyTreeNode[] nodes;

		public NodesTransferable(MyTreeNode[] nodes) {
			this.nodes = nodes;
		}

		public Object getTransferData(DataFlavor flavor)
				throws UnsupportedFlavorException {
			if (!isDataFlavorSupported(flavor))
				throw new UnsupportedFlavorException(flavor);
			return nodes;
		}

		public DataFlavor[] getTransferDataFlavors() {
			return flavors;
		}

		public boolean isDataFlavorSupported(DataFlavor flavor) {
			return nodesFlavor.equals(flavor);
		}
	}
}
