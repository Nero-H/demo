package presentaion.utility;




import javax.swing.JTree;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import vo.GoodsSortVO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author administration
 */
public class JTreeDemo extends javax.swing.JFrame {
	GoodsSortVO root = new GoodsSortVO("root");

	/**
	 * Creates new form JTreeDemo
	 */
	public JTreeDemo() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		root.addChild(new GoodsSortVO("1"));
		root.addChild(new GoodsSortVO("2"));
		root.getChildren().get(0).addChild(new GoodsSortVO("3"));
		goodsTree = new javax.swing.JTree(new GoodsTreeModel(root, true));
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		goodsTree.putClientProperty("JTree.lineStyle", "Angled");
		goodsTree.setTransferHandler(new TreeTransferHandler());
		goodsTree.setDragEnabled(true);
		goodsTree.setDropMode(javax.swing.DropMode.ON_OR_INSERT);
		goodsTree.setEditable(true);
		goodsTree.setShowsRootHandles(true);
		jScrollPane1.setViewportView(goodsTree);
		goodsTree.getSelectionModel().setSelectionMode(
				TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);

		jButton1.setText("Add");
		jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jButton1MousePressed(evt);
			}
		});
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("Delete");
		jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jButton2MousePressed(evt);
			}
		});

		jButton3.setText("AddLeaf");
		jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
			@Override
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jButton3MousePressed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(51, 51, 51)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										391,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup()
								.addGap(40, 40, 40)
								.addComponent(jButton1)
								.addGap(38, 38, 38)
								.addComponent(jButton3)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										42, Short.MAX_VALUE)
								.addComponent(jButton2).addGap(160, 160, 160)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap(11, Short.MAX_VALUE)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										275,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jButton1)
												.addComponent(jButton2)
												.addComponent(jButton3))));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_jButton1ActionPerformed

	int childNum = 0;

	private void jButton1MousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton1MousePressed
		// TODO add your handling code here:
		GoodsSortVO parentNode = null;
		TreePath parentPath = goodsTree.getSelectionPath();

		if (parentPath == null) {
			// There is no selection. Default to the root node.
			parentNode = (GoodsSortVO) goodsTree.getModel().getRoot();
		} else {
			parentNode = (GoodsSortVO) (parentPath.getLastPathComponent());
		}
		addObject(parentNode, new GoodsSortVO("new Node" + childNum++), true);
	}// GEN-LAST:event_jButton1MousePressed

	private void jButton3MousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton3MousePressed
		// TODO add your handling code here:
		GoodsSortVO parentNode = null;
		TreePath parentPath = goodsTree.getSelectionPath();

		if (parentPath == null) {
			// There is no selection. Default to the root node.
			parentNode = (GoodsSortVO) goodsTree.getModel().getRoot();
		} else {
			parentNode = (GoodsSortVO) (parentPath.getLastPathComponent());
		}
		addObject(parentNode, new GoodsSortVO("new Node" + childNum++, false),
				true);
	}// GEN-LAST:event_jButton3MousePressed

	private void jButton2MousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jButton2MousePressed
		// TODO add your handling code here:
		if (bloodConnect(goodsTree)) {
			return;
		}
		

	}// GEN-LAST:event_jButton2MousePressed

	public GoodsSortVO addObject(GoodsSortVO parent, Object child,
			boolean shouldBeVisible) {
		GoodsSortVO childNode = (GoodsSortVO) child;

		((GoodsTreeModel) (goodsTree.getModel())).insertNodeInto(childNode,
				parent, parent.getChildCount());

		// Make sure the user can see the lovely new node.
		if (shouldBeVisible) {
			goodsTree.scrollPathToVisible(new TreePath(childNode.getPath()));
		}
		return childNode;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JTreeDemo.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JTreeDemo.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JTreeDemo.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JTreeDemo.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JTreeDemo().setVisible(true);
			}
		});
	}

	private boolean bloodConnect(JTree tree) {
		int[] selRows = tree.getSelectionRows();
		MyTreeNode[] nodeList = new MyTreeNode[selRows.length];
		for (int i = 0; i < selRows.length; i++) {
			TreePath path = tree.getPathForRow(selRows[i]);
			nodeList[i] = (MyTreeNode) path.getLastPathComponent();
		}
		for (int i = 0; i < selRows.length; i++) {
			for (int j = i + 1; j < selRows.length; j++) {
				if ((nodeList[i].isNodeAncestor(nodeList[j]))
						|| (nodeList[j].isNodeAncestor(nodeList[i]))) {
					return true;
				}
			}
		}
		
		return false;
	}
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTree goodsTree;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables
}
